Conceptually, a work queue is designed to coordinate work between a producer and a set of worker threads.
When some task needs to be performed, the producer adds an object containing the task routine to the work queue.
If the work queue is full, the producer will block until a worker thread removes an object from the queue.
Eventually, one of the worker threads removes the object from the work queue and executes the routine.
If the work queue is empty, a worker thread will block until an object is made available by the producer or until the keep-alive time expires.

Work queues are useful for several reasons:
* To easily perform tasks asynchronously and concurrently in your application;
* To let you focus on the work you actually want to perform without having to worry about the thread creation and management;
* To minimize overhead, by reusing previously constructed threads rather than creating new ones;
* To bound resource use, by setting a limit on the maximum number of simultaneously executing threads;